<?php

/**
 * PSR-11 Container Interface
 *
 * This file defines the standard interface for dependency injection containers as specified by the PSR-11 standard.
 *
 * Purpose:
 * - Provides a common interface for retrieving entries from a container.
 * - Enables interoperability between different PHP frameworks and libraries that use dependency injection.
 * - Used by the Aegis theme and other PHP applications for container-based dependency management.
 *
 * @package    psr/container
 * @since      1.0.0
 * @author     PHP-FIG
 * @link       https://www.php-fig.org/psr/psr-11/
 *
 * IMPORTANT:
 * - This file is part of a third-party standard and may be overwritten on updates.
 * - Do not edit this file directly. For custom container behavior, implement this interface in your own application code.
 *
 * For developer documentation and onboarding. No logic or interface changes in this doc update.
 */

declare(strict_types=1);

namespace Psr\Container;

/**
 * Describes the interface of a container that exposes methods to read its entries.
 */
interface ContainerInterface
{
    /**
     * Finds an entry of the container by its identifier and returns it.
     *
     * @param string $id Identifier of the entry to look for.
     *
     * @throws NotFoundExceptionInterface  No entry was found for **this** identifier.
     * @throws ContainerExceptionInterface Error while retrieving the entry.
     *
     * @return mixed Entry.
     */
    public function get(string $id);

    /**
     * Returns true if the container can return an entry for the given identifier.
     * Returns false otherwise.
     *
     * `has($id)` returning true does not mean that `get($id)` will not throw an exception.
     * It does however mean that `get($id)` will not throw a `NotFoundExceptionInterface`.
     *
     * @param string $id Identifier of the entry to look for.
     *
     * @return bool
     */
    public function has(string $id): bool;
}
